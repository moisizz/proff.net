<?php

/**
 * BasePreorder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $description
 * @property User $User
 * @property Doctrine_Collection $Furniture
 * @property Doctrine_Collection $Material
 * @property Doctrine_Collection $Portfolio
 * @property Doctrine_Collection $FurniturePreorder
 * @property Doctrine_Collection $MaterialPreorder
 * @property Doctrine_Collection $PortfolioPreorder
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method integer             getUserId()            Returns the current record's "user_id" value
 * @method string              getDescription()       Returns the current record's "description" value
 * @method User                getUser()              Returns the current record's "User" value
 * @method Doctrine_Collection getFurniture()         Returns the current record's "Furniture" collection
 * @method Doctrine_Collection getMaterial()          Returns the current record's "Material" collection
 * @method Doctrine_Collection getPortfolio()         Returns the current record's "Portfolio" collection
 * @method Doctrine_Collection getFurniturePreorder() Returns the current record's "FurniturePreorder" collection
 * @method Doctrine_Collection getMaterialPreorder()  Returns the current record's "MaterialPreorder" collection
 * @method Doctrine_Collection getPortfolioPreorder() Returns the current record's "PortfolioPreorder" collection
 * @method Preorder            setId()                Sets the current record's "id" value
 * @method Preorder            setUserId()            Sets the current record's "user_id" value
 * @method Preorder            setDescription()       Sets the current record's "description" value
 * @method Preorder            setUser()              Sets the current record's "User" value
 * @method Preorder            setFurniture()         Sets the current record's "Furniture" collection
 * @method Preorder            setMaterial()          Sets the current record's "Material" collection
 * @method Preorder            setPortfolio()         Sets the current record's "Portfolio" collection
 * @method Preorder            setFurniturePreorder() Sets the current record's "FurniturePreorder" collection
 * @method Preorder            setMaterialPreorder()  Sets the current record's "MaterialPreorder" collection
 * @method Preorder            setPortfolioPreorder() Sets the current record's "PortfolioPreorder" collection
 * 
 * @package    proff.dev
 * @subpackage model
 * @author     Лесникова Екатерина
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePreorder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('preorder');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('description', 'string', 2047, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 2047,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Furniture', array(
             'refClass' => 'FurniturePreorder',
             'local' => 'preorder_id',
             'foreign' => 'furniture_id'));

        $this->hasMany('Material', array(
             'refClass' => 'MaterialPreorder',
             'local' => 'preorder_id',
             'foreign' => 'material_id'));

        $this->hasMany('Portfolio', array(
             'refClass' => 'PortfolioPreorder',
             'local' => 'preorder_id',
             'foreign' => 'portfolio_id'));

        $this->hasMany('FurniturePreorder', array(
             'local' => 'id',
             'foreign' => 'preorder_id'));

        $this->hasMany('MaterialPreorder', array(
             'local' => 'id',
             'foreign' => 'preorder_id'));

        $this->hasMany('PortfolioPreorder', array(
             'local' => 'id',
             'foreign' => 'preorder_id'));
    }
}